// This part of the code creates a comprehensive overlay system for displaying workflow details with enhanced information
// It provides detailed workflow views using the proven InsightOverlay UI pattern

import React, { useState, useEffect } from 'react';
import { X, AlertTriangle, TrendingUp, DollarSign, Bot } from 'lucide-react';
import { CreatedWorkflow } from '../utils/workflowStorage';
import { BrainIcon } from './ui/BrainIcon';

interface WorkflowDetailsOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  workflow: CreatedWorkflow | null;
  agentName?: string;
}

// This part of the code renders the main workflow details overlay with full-screen modal design
export function WorkflowDetailsOverlay({ isOpen, onClose, workflow, agentName = "Dashboard Agent" }: WorkflowDetailsOverlayProps) {
  const [showSuccess, setShowSuccess] = useState(false);

  // This part of the code handles click outside to close functionality
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
      document.body.style.overflow = 'hidden';
    }
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  // This part of the code determines the appropriate icon based on workflow priority
  const getPriorityIcon = () => {
    if (!workflow) return <TrendingUp className="h-6 w-6 text-blue-600" />;
    
    switch (workflow.priority) {
      case 'critical':
        return <AlertTriangle className="h-6 w-6 text-red-600" />;
      case 'high':
        return <AlertTriangle className="h-6 w-6 text-yellow-600" />;
      default:
        return <TrendingUp className="h-6 w-6 text-blue-600" />;
    }
  };

  // This part of the code gets priority-based styling for containers and text
  const getPriorityStyles = () => {
    if (!workflow) return {
      container: 'bg-blue-50 border-blue-200',
      text: 'text-blue-700',
      badge: 'bg-blue-100 text-blue-700'
    };

    switch (workflow.priority) {
      case 'critical':
        return {
          container: 'bg-red-50 border-red-200',
          text: 'text-red-700',
          badge: 'bg-red-100 text-red-700'
        };
      case 'high':
        return {
          container: 'bg-yellow-50 border-yellow-200',
          text: 'text-yellow-700',
          badge: 'bg-yellow-100 text-yellow-700'
        };
      default:
        return {
          container: 'bg-blue-50 border-blue-200',
          text: 'text-blue-700',
          badge: 'bg-blue-100 text-blue-700'
        };
    }
  };

  if (!isOpen || !workflow) return null;

  const styles = getPriorityStyles();

  return (
    <div 
      className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4"
      onClick={onClose}
    >
      <div 
        className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {/* This part of the code renders the header section with priority icon, title, and close button */}
        <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {getPriorityIcon()}
            <div>
              <div className="flex items-center">
                <h2 className="text-xl font-semibold text-gray-900">{workflow.title}</h2>
                {/* This part of the code adds a blue brain icon to indicate AI-generated content */}
                {workflow.source === 'ai_insight' && <BrainIcon className="h-6 w-6 ml-3 text-blue-600" />}
              </div>
              <div className="flex items-center space-x-2 mt-1">
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${styles.badge}`}>
                  {workflow.source === 'ai_insight' ? 'AI Generated Insight' : 'Manual Workflow'}
                </span>
                <span className="text-sm text-gray-500">
                  Generated by {agentName} • ID: {workflow.id}
                </span>
              </div>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100 transition-colors"
            title="Close"
          >
            <X className="h-6 w-6 text-gray-600" />
          </button>
        </div>

        {/* This part of the code shows success state when workflow actions are completed */}
        {showSuccess && (
          <div className="mx-6 mt-4 bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center">
              <Bot className="h-5 w-5 text-green-600 mr-2" />
              <span className="text-green-700 font-medium">✓ Workflow action completed!</span>
            </div>
          </div>
        )}

        <div className="p-6 space-y-6">
          {/* This part of the code displays the main workflow summary with priority-based styling */}
          <div className={`border rounded-lg p-4 ${styles.container}`}>
            <div className="flex items-start justify-between mb-3">
              <h3 className={`font-semibold ${styles.text}`}>Insight Summary</h3>
              <span className={`px-2 py-1 text-xs font-medium rounded ${styles.badge}`}>
                {workflow.priority.charAt(0).toUpperCase() + workflow.priority.slice(1)}
              </span>
            </div>
            <p className={`text-sm leading-relaxed ${styles.text}`}>
              {workflow.title}
            </p>
          </div>

          {/* This part of the code shows financial impact if available */}
          {workflow.dollarImpact && workflow.dollarImpact > 0 && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <DollarSign className="h-5 w-5 text-green-600 mr-2" />
                <h3 className="font-semibold text-green-700">Financial Impact</h3>
              </div>
              <p className="text-2xl font-bold text-green-600">
                ${workflow.dollarImpact.toLocaleString()}
              </p>
              <p className="text-sm text-green-600">Estimated impact if addressed</p>
            </div>
          )}

          {/* This part of the code displays detailed workflow information (adapted from Analysis Context) */}
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <h3 className="font-semibold text-gray-900 mb-3">Detailed Workflow Description</h3>
            <div className="space-y-2">
              <div className="text-sm text-gray-800 leading-relaxed whitespace-pre-line">
                {workflow.description}
              </div>
              
              {/* This part of the code shows workflow steps if available */}
              {workflow.steps && workflow.steps.length > 0 && (
                <div className="mt-4 pt-4 border-t border-gray-300">
                  <h4 className="font-medium text-gray-900 mb-2">Implementation Steps:</h4>
                  <ul className="text-sm text-gray-600 space-y-1">
                    {workflow.steps.map((step, index) => (
                      <li key={step.id} className="flex items-center">
                        <span className="w-1.5 h-1.5 bg-gray-400 rounded-full mr-2"></span>
                        Step {index + 1}: {step.title}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>

          {/* This part of the code provides additional workflow metadata */}
          <div className="text-xs text-gray-500 pt-4 border-t border-gray-200">
            <p>Created: {new Date(workflow.createdAt).toLocaleString()}</p>
            <p>Source: {workflow.source.replace('_', ' ')} • Priority: {workflow.priority}</p>
            <p>Estimated Time: {workflow.estimatedTime}</p>
          </div>
        </div>
      </div>
    </div>
  );
}
